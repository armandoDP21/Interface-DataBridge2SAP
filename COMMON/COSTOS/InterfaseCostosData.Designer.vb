'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.1
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("InterfaseCostosData"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class InterfaseCostosData
    Inherits Global.System.Data.DataSet
    
    Private tableItemsSinCosto As ItemsSinCostoDataTable
    
    Private tableSAP_INTERFASE_COSTOS As SAP_INTERFASE_COSTOSDataTable
    
    Private tableITEMSSINPRECIO As ITEMSSINPRECIODataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("ItemsSinCosto")) Is Nothing) Then
                MyBase.Tables.Add(New ItemsSinCostoDataTable(ds.Tables("ItemsSinCosto")))
            End If
            If (Not (ds.Tables("SAP_INTERFASE_COSTOS")) Is Nothing) Then
                MyBase.Tables.Add(New SAP_INTERFASE_COSTOSDataTable(ds.Tables("SAP_INTERFASE_COSTOS")))
            End If
            If (Not (ds.Tables("ItemsSinPrecio")) Is Nothing) Then
                MyBase.Tables.Add(New ITEMSSINPRECIODataTable(ds.Tables("ItemsSinPrecio")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ItemsSinCosto() As ItemsSinCostoDataTable
        Get
            Return Me.tableItemsSinCosto
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SAP_INTERFASE_COSTOS() As SAP_INTERFASE_COSTOSDataTable
        Get
            Return Me.tableSAP_INTERFASE_COSTOS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ITEMSSINPRECIO() As ITEMSSINPRECIODataTable
        Get
            Return Me.tableITEMSSINPRECIO
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As InterfaseCostosData = CType(MyBase.Clone,InterfaseCostosData)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXml(reader)
            If (Not (ds.Tables("ItemsSinCosto")) Is Nothing) Then
                MyBase.Tables.Add(New ItemsSinCostoDataTable(ds.Tables("ItemsSinCosto")))
            End If
            If (Not (ds.Tables("SAP_INTERFASE_COSTOS")) Is Nothing) Then
                MyBase.Tables.Add(New SAP_INTERFASE_COSTOSDataTable(ds.Tables("SAP_INTERFASE_COSTOS")))
            End If
            If (Not (ds.Tables("ItemsSinPrecio")) Is Nothing) Then
                MyBase.Tables.Add(New ITEMSSINPRECIODataTable(ds.Tables("ItemsSinPrecio")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableItemsSinCosto = CType(MyBase.Tables("ItemsSinCosto"),ItemsSinCostoDataTable)
        If (initTable = true) Then
            If (Not (Me.tableItemsSinCosto) Is Nothing) Then
                Me.tableItemsSinCosto.InitVars
            End If
        End If
        Me.tableSAP_INTERFASE_COSTOS = CType(MyBase.Tables("SAP_INTERFASE_COSTOS"),SAP_INTERFASE_COSTOSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSAP_INTERFASE_COSTOS) Is Nothing) Then
                Me.tableSAP_INTERFASE_COSTOS.InitVars
            End If
        End If
        Me.tableITEMSSINPRECIO = CType(MyBase.Tables("ItemsSinPrecio"),ITEMSSINPRECIODataTable)
        If (initTable = true) Then
            If (Not (Me.tableITEMSSINPRECIO) Is Nothing) Then
                Me.tableITEMSSINPRECIO.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Sub InitClass()
        Me.DataSetName = "InterfaseCostosData"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/InterfaseCostosData.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableItemsSinCosto = New ItemsSinCostoDataTable()
        MyBase.Tables.Add(Me.tableItemsSinCosto)
        Me.tableSAP_INTERFASE_COSTOS = New SAP_INTERFASE_COSTOSDataTable()
        MyBase.Tables.Add(Me.tableSAP_INTERFASE_COSTOS)
        Me.tableITEMSSINPRECIO = New ITEMSSINPRECIODataTable()
        MyBase.Tables.Add(Me.tableITEMSSINPRECIO)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeItemsSinCosto() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeSAP_INTERFASE_COSTOS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeITEMSSINPRECIO() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As InterfaseCostosData = New InterfaseCostosData()
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub ItemsSinCostoRowChangeEventHandler(ByVal sender As Object, ByVal e As ItemsSinCostoRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub SAP_INTERFASE_COSTOSRowChangeEventHandler(ByVal sender As Object, ByVal e As SAP_INTERFASE_COSTOSRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub ITEMSSINPRECIORowChangeEventHandler(ByVal sender As Object, ByVal e As ITEMSSINPRECIORowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ItemsSinCostoDataTable
        Inherits Global.System.Data.TypedTableBase(Of ItemsSinCostoRow)
        
        Private columnPRO_CLAVE As Global.System.Data.DataColumn
        
        Private columnPRO_DESCRI As Global.System.Data.DataColumn
        
        Private columnSAP_ACTUAL_COST As Global.System.Data.DataColumn
        
        Private columnSAP_UOM_BASE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ItemsSinCosto"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PRO_CLAVEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRO_CLAVE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PRO_DESCRIColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRO_DESCRI
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SAP_ACTUAL_COSTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSAP_ACTUAL_COST
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SAP_UOM_BASEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSAP_UOM_BASE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ItemsSinCostoRow
            Get
                Return CType(Me.Rows(index),ItemsSinCostoRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event ItemsSinCostoRowChanging As ItemsSinCostoRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event ItemsSinCostoRowChanged As ItemsSinCostoRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event ItemsSinCostoRowDeleting As ItemsSinCostoRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event ItemsSinCostoRowDeleted As ItemsSinCostoRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddItemsSinCostoRow(ByVal row As ItemsSinCostoRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddItemsSinCostoRow(ByVal PRO_CLAVE As String, ByVal PRO_DESCRI As String, ByVal SAP_ACTUAL_COST As Decimal, ByVal SAP_UOM_BASE As String) As ItemsSinCostoRow
            Dim rowItemsSinCostoRow As ItemsSinCostoRow = CType(Me.NewRow,ItemsSinCostoRow)
            Dim columnValuesArray() As Object = New Object() {PRO_CLAVE, PRO_DESCRI, SAP_ACTUAL_COST, SAP_UOM_BASE}
            rowItemsSinCostoRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowItemsSinCostoRow)
            Return rowItemsSinCostoRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ItemsSinCostoDataTable = CType(MyBase.Clone,ItemsSinCostoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ItemsSinCostoDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnPRO_CLAVE = MyBase.Columns("PRO_CLAVE")
            Me.columnPRO_DESCRI = MyBase.Columns("PRO_DESCRI")
            Me.columnSAP_ACTUAL_COST = MyBase.Columns("SAP_ACTUAL_COST")
            Me.columnSAP_UOM_BASE = MyBase.Columns("SAP_UOM_BASE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnPRO_CLAVE = New Global.System.Data.DataColumn("PRO_CLAVE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRO_CLAVE)
            Me.columnPRO_DESCRI = New Global.System.Data.DataColumn("PRO_DESCRI", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRO_DESCRI)
            Me.columnSAP_ACTUAL_COST = New Global.System.Data.DataColumn("SAP_ACTUAL_COST", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAP_ACTUAL_COST)
            Me.columnSAP_UOM_BASE = New Global.System.Data.DataColumn("SAP_UOM_BASE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAP_UOM_BASE)
            Me.columnPRO_CLAVE.AllowDBNull = false
            Me.columnPRO_CLAVE.MaxLength = 10
            Me.columnPRO_DESCRI.MaxLength = 50
            Me.columnSAP_ACTUAL_COST.DefaultValue = CType(0,Decimal)
            Me.columnSAP_UOM_BASE.DefaultValue = CType("UN",String)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewItemsSinCostoRow() As ItemsSinCostoRow
            Return CType(Me.NewRow,ItemsSinCostoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ItemsSinCostoRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ItemsSinCostoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ItemsSinCostoRowChangedEvent) Is Nothing) Then
                RaiseEvent ItemsSinCostoRowChanged(Me, New ItemsSinCostoRowChangeEvent(CType(e.Row,ItemsSinCostoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ItemsSinCostoRowChangingEvent) Is Nothing) Then
                RaiseEvent ItemsSinCostoRowChanging(Me, New ItemsSinCostoRowChangeEvent(CType(e.Row,ItemsSinCostoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ItemsSinCostoRowDeletedEvent) Is Nothing) Then
                RaiseEvent ItemsSinCostoRowDeleted(Me, New ItemsSinCostoRowChangeEvent(CType(e.Row,ItemsSinCostoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ItemsSinCostoRowDeletingEvent) Is Nothing) Then
                RaiseEvent ItemsSinCostoRowDeleting(Me, New ItemsSinCostoRowChangeEvent(CType(e.Row,ItemsSinCostoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveItemsSinCostoRow(ByVal row As ItemsSinCostoRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As InterfaseCostosData = New InterfaseCostosData()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ItemsSinCostoDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SAP_INTERFASE_COSTOSDataTable
        Inherits Global.System.Data.TypedTableBase(Of SAP_INTERFASE_COSTOSRow)
        
        Private columnSAP_PERIOD As Global.System.Data.DataColumn
        
        Private columnSAP_FISCAL_YEAR As Global.System.Data.DataColumn
        
        Private columnSAP_ACTUAL_COST As Global.System.Data.DataColumn
        
        Private columnSAP_PREVIOUS_COST As Global.System.Data.DataColumn
        
        Private columnSAP_COST_DIFFERENCES As Global.System.Data.DataColumn
        
        Private columnSAP_ID_MATERIAL As Global.System.Data.DataColumn
        
        Private columnSAP_TEXTO_MATERIAL As Global.System.Data.DataColumn
        
        Private columnSAP_UOM_BASE As Global.System.Data.DataColumn
        
        Private columnSAP_CURRENCY As Global.System.Data.DataColumn
        
        Private columnSAP_ID_COMPANIA As Global.System.Data.DataColumn
        
        Private columnSAP_PLANTA As Global.System.Data.DataColumn
        
        Private columnTIPO_DE_PRODUCTO As Global.System.Data.DataColumn
        
        Private columnCOSTO_FLETE_POR_UNIDAD As Global.System.Data.DataColumn
        
        Private columnCOSTO_ADUANAL_POR_UNIDAD As Global.System.Data.DataColumn
        
        Private columnTOTAL_COSTO_PRODUCT0 As Global.System.Data.DataColumn
        
        Private columnSAP_NUM_MATERIAL_LEGADO As Global.System.Data.DataColumn
        
        Private columnSAP_ID_SISTEMA_LEGADO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SAP_INTERFASE_COSTOS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SAP_PERIODColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSAP_PERIOD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SAP_FISCAL_YEARColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSAP_FISCAL_YEAR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SAP_ACTUAL_COSTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSAP_ACTUAL_COST
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SAP_PREVIOUS_COSTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSAP_PREVIOUS_COST
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SAP_COST_DIFFERENCESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSAP_COST_DIFFERENCES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SAP_ID_MATERIALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSAP_ID_MATERIAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SAP_TEXTO_MATERIALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSAP_TEXTO_MATERIAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SAP_UOM_BASEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSAP_UOM_BASE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SAP_CURRENCYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSAP_CURRENCY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SAP_ID_COMPANIAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSAP_ID_COMPANIA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SAP_PLANTAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSAP_PLANTA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TIPO_DE_PRODUCTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTIPO_DE_PRODUCTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property COSTO_FLETE_POR_UNIDADColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOSTO_FLETE_POR_UNIDAD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property COSTO_ADUANAL_POR_UNIDADColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOSTO_ADUANAL_POR_UNIDAD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TOTAL_COSTO_PRODUCT0Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTOTAL_COSTO_PRODUCT0
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SAP_NUM_MATERIAL_LEGADOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSAP_NUM_MATERIAL_LEGADO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SAP_ID_SISTEMA_LEGADOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSAP_ID_SISTEMA_LEGADO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SAP_INTERFASE_COSTOSRow
            Get
                Return CType(Me.Rows(index),SAP_INTERFASE_COSTOSRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event SAP_INTERFASE_COSTOSRowChanging As SAP_INTERFASE_COSTOSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event SAP_INTERFASE_COSTOSRowChanged As SAP_INTERFASE_COSTOSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event SAP_INTERFASE_COSTOSRowDeleting As SAP_INTERFASE_COSTOSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event SAP_INTERFASE_COSTOSRowDeleted As SAP_INTERFASE_COSTOSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddSAP_INTERFASE_COSTOSRow(ByVal row As SAP_INTERFASE_COSTOSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddSAP_INTERFASE_COSTOSRow( _
                    ByVal SAP_PERIOD As String,  _
                    ByVal SAP_FISCAL_YEAR As Integer,  _
                    ByVal SAP_ACTUAL_COST As Decimal,  _
                    ByVal SAP_PREVIOUS_COST As Decimal,  _
                    ByVal SAP_COST_DIFFERENCES As Decimal,  _
                    ByVal SAP_ID_MATERIAL As String,  _
                    ByVal SAP_TEXTO_MATERIAL As String,  _
                    ByVal SAP_UOM_BASE As String,  _
                    ByVal SAP_CURRENCY As String,  _
                    ByVal SAP_ID_COMPANIA As String,  _
                    ByVal SAP_PLANTA As String,  _
                    ByVal TIPO_DE_PRODUCTO As String,  _
                    ByVal COSTO_FLETE_POR_UNIDAD As Decimal,  _
                    ByVal COSTO_ADUANAL_POR_UNIDAD As Decimal,  _
                    ByVal TOTAL_COSTO_PRODUCT0 As Decimal,  _
                    ByVal SAP_NUM_MATERIAL_LEGADO As String,  _
                    ByVal SAP_ID_SISTEMA_LEGADO As String) As SAP_INTERFASE_COSTOSRow
            Dim rowSAP_INTERFASE_COSTOSRow As SAP_INTERFASE_COSTOSRow = CType(Me.NewRow,SAP_INTERFASE_COSTOSRow)
            Dim columnValuesArray() As Object = New Object() {SAP_PERIOD, SAP_FISCAL_YEAR, SAP_ACTUAL_COST, SAP_PREVIOUS_COST, SAP_COST_DIFFERENCES, SAP_ID_MATERIAL, SAP_TEXTO_MATERIAL, SAP_UOM_BASE, SAP_CURRENCY, SAP_ID_COMPANIA, SAP_PLANTA, TIPO_DE_PRODUCTO, COSTO_FLETE_POR_UNIDAD, COSTO_ADUANAL_POR_UNIDAD, TOTAL_COSTO_PRODUCT0, SAP_NUM_MATERIAL_LEGADO, SAP_ID_SISTEMA_LEGADO}
            rowSAP_INTERFASE_COSTOSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSAP_INTERFASE_COSTOSRow)
            Return rowSAP_INTERFASE_COSTOSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindBySAP_PERIODSAP_FISCAL_YEARSAP_ID_COMPANIASAP_NUM_MATERIAL_LEGADOSAP_ID_SISTEMA_LEGADO(ByVal SAP_PERIOD As String, ByVal SAP_FISCAL_YEAR As Integer, ByVal SAP_ID_COMPANIA As String, ByVal SAP_NUM_MATERIAL_LEGADO As String, ByVal SAP_ID_SISTEMA_LEGADO As String) As SAP_INTERFASE_COSTOSRow
            Return CType(Me.Rows.Find(New Object() {SAP_PERIOD, SAP_FISCAL_YEAR, SAP_ID_COMPANIA, SAP_NUM_MATERIAL_LEGADO, SAP_ID_SISTEMA_LEGADO}),SAP_INTERFASE_COSTOSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SAP_INTERFASE_COSTOSDataTable = CType(MyBase.Clone,SAP_INTERFASE_COSTOSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SAP_INTERFASE_COSTOSDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnSAP_PERIOD = MyBase.Columns("SAP_PERIOD")
            Me.columnSAP_FISCAL_YEAR = MyBase.Columns("SAP_FISCAL_YEAR")
            Me.columnSAP_ACTUAL_COST = MyBase.Columns("SAP_ACTUAL_COST")
            Me.columnSAP_PREVIOUS_COST = MyBase.Columns("SAP_PREVIOUS_COST")
            Me.columnSAP_COST_DIFFERENCES = MyBase.Columns("SAP_COST_DIFFERENCES")
            Me.columnSAP_ID_MATERIAL = MyBase.Columns("SAP_ID_MATERIAL")
            Me.columnSAP_TEXTO_MATERIAL = MyBase.Columns("SAP_TEXTO_MATERIAL")
            Me.columnSAP_UOM_BASE = MyBase.Columns("SAP_UOM_BASE")
            Me.columnSAP_CURRENCY = MyBase.Columns("SAP_CURRENCY")
            Me.columnSAP_ID_COMPANIA = MyBase.Columns("SAP_ID_COMPANIA")
            Me.columnSAP_PLANTA = MyBase.Columns("SAP_PLANTA")
            Me.columnTIPO_DE_PRODUCTO = MyBase.Columns("TIPO_DE_PRODUCTO")
            Me.columnCOSTO_FLETE_POR_UNIDAD = MyBase.Columns("COSTO_FLETE_POR_UNIDAD")
            Me.columnCOSTO_ADUANAL_POR_UNIDAD = MyBase.Columns("COSTO_ADUANAL_POR_UNIDAD")
            Me.columnTOTAL_COSTO_PRODUCT0 = MyBase.Columns("TOTAL_COSTO_PRODUCT0")
            Me.columnSAP_NUM_MATERIAL_LEGADO = MyBase.Columns("SAP_NUM_MATERIAL_LEGADO")
            Me.columnSAP_ID_SISTEMA_LEGADO = MyBase.Columns("SAP_ID_SISTEMA_LEGADO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnSAP_PERIOD = New Global.System.Data.DataColumn("SAP_PERIOD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAP_PERIOD)
            Me.columnSAP_FISCAL_YEAR = New Global.System.Data.DataColumn("SAP_FISCAL_YEAR", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAP_FISCAL_YEAR)
            Me.columnSAP_ACTUAL_COST = New Global.System.Data.DataColumn("SAP_ACTUAL_COST", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAP_ACTUAL_COST)
            Me.columnSAP_PREVIOUS_COST = New Global.System.Data.DataColumn("SAP_PREVIOUS_COST", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAP_PREVIOUS_COST)
            Me.columnSAP_COST_DIFFERENCES = New Global.System.Data.DataColumn("SAP_COST_DIFFERENCES", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAP_COST_DIFFERENCES)
            Me.columnSAP_ID_MATERIAL = New Global.System.Data.DataColumn("SAP_ID_MATERIAL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAP_ID_MATERIAL)
            Me.columnSAP_TEXTO_MATERIAL = New Global.System.Data.DataColumn("SAP_TEXTO_MATERIAL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAP_TEXTO_MATERIAL)
            Me.columnSAP_UOM_BASE = New Global.System.Data.DataColumn("SAP_UOM_BASE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAP_UOM_BASE)
            Me.columnSAP_CURRENCY = New Global.System.Data.DataColumn("SAP_CURRENCY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAP_CURRENCY)
            Me.columnSAP_ID_COMPANIA = New Global.System.Data.DataColumn("SAP_ID_COMPANIA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAP_ID_COMPANIA)
            Me.columnSAP_PLANTA = New Global.System.Data.DataColumn("SAP_PLANTA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAP_PLANTA)
            Me.columnTIPO_DE_PRODUCTO = New Global.System.Data.DataColumn("TIPO_DE_PRODUCTO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIPO_DE_PRODUCTO)
            Me.columnCOSTO_FLETE_POR_UNIDAD = New Global.System.Data.DataColumn("COSTO_FLETE_POR_UNIDAD", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOSTO_FLETE_POR_UNIDAD)
            Me.columnCOSTO_ADUANAL_POR_UNIDAD = New Global.System.Data.DataColumn("COSTO_ADUANAL_POR_UNIDAD", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOSTO_ADUANAL_POR_UNIDAD)
            Me.columnTOTAL_COSTO_PRODUCT0 = New Global.System.Data.DataColumn("TOTAL_COSTO_PRODUCT0", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTOTAL_COSTO_PRODUCT0)
            Me.columnSAP_NUM_MATERIAL_LEGADO = New Global.System.Data.DataColumn("SAP_NUM_MATERIAL_LEGADO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAP_NUM_MATERIAL_LEGADO)
            Me.columnSAP_ID_SISTEMA_LEGADO = New Global.System.Data.DataColumn("SAP_ID_SISTEMA_LEGADO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAP_ID_SISTEMA_LEGADO)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnSAP_PERIOD, Me.columnSAP_FISCAL_YEAR, Me.columnSAP_ID_COMPANIA, Me.columnSAP_NUM_MATERIAL_LEGADO, Me.columnSAP_ID_SISTEMA_LEGADO}, true))
            Me.columnSAP_PERIOD.AllowDBNull = false
            Me.columnSAP_PERIOD.MaxLength = 3
            Me.columnSAP_FISCAL_YEAR.AllowDBNull = false
            Me.columnSAP_ID_MATERIAL.MaxLength = 18
            Me.columnSAP_TEXTO_MATERIAL.MaxLength = 50
            Me.columnSAP_UOM_BASE.MaxLength = 4
            Me.columnSAP_CURRENCY.MaxLength = 5
            Me.columnSAP_ID_COMPANIA.AllowDBNull = false
            Me.columnSAP_ID_COMPANIA.MaxLength = 4
            Me.columnSAP_PLANTA.MaxLength = 4
            Me.columnTIPO_DE_PRODUCTO.MaxLength = 2
            Me.columnSAP_NUM_MATERIAL_LEGADO.AllowDBNull = false
            Me.columnSAP_NUM_MATERIAL_LEGADO.MaxLength = 18
            Me.columnSAP_ID_SISTEMA_LEGADO.AllowDBNull = false
            Me.columnSAP_ID_SISTEMA_LEGADO.MaxLength = 15
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewSAP_INTERFASE_COSTOSRow() As SAP_INTERFASE_COSTOSRow
            Return CType(Me.NewRow,SAP_INTERFASE_COSTOSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SAP_INTERFASE_COSTOSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SAP_INTERFASE_COSTOSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SAP_INTERFASE_COSTOSRowChangedEvent) Is Nothing) Then
                RaiseEvent SAP_INTERFASE_COSTOSRowChanged(Me, New SAP_INTERFASE_COSTOSRowChangeEvent(CType(e.Row,SAP_INTERFASE_COSTOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SAP_INTERFASE_COSTOSRowChangingEvent) Is Nothing) Then
                RaiseEvent SAP_INTERFASE_COSTOSRowChanging(Me, New SAP_INTERFASE_COSTOSRowChangeEvent(CType(e.Row,SAP_INTERFASE_COSTOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SAP_INTERFASE_COSTOSRowDeletedEvent) Is Nothing) Then
                RaiseEvent SAP_INTERFASE_COSTOSRowDeleted(Me, New SAP_INTERFASE_COSTOSRowChangeEvent(CType(e.Row,SAP_INTERFASE_COSTOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SAP_INTERFASE_COSTOSRowDeletingEvent) Is Nothing) Then
                RaiseEvent SAP_INTERFASE_COSTOSRowDeleting(Me, New SAP_INTERFASE_COSTOSRowChangeEvent(CType(e.Row,SAP_INTERFASE_COSTOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveSAP_INTERFASE_COSTOSRow(ByVal row As SAP_INTERFASE_COSTOSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As InterfaseCostosData = New InterfaseCostosData()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SAP_INTERFASE_COSTOSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ITEMSSINPRECIODataTable
        Inherits Global.System.Data.TypedTableBase(Of ITEMSSINPRECIORow)
        
        Private columnSAP_NUM_MATERIAL_LEGADO As Global.System.Data.DataColumn
        
        Private columnSAP_TEXTO_MATERIAL As Global.System.Data.DataColumn
        
        Private columnTOTAL_COSTO_PRODUCT0 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ItemsSinPrecio"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SAP_NUM_MATERIAL_LEGADOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSAP_NUM_MATERIAL_LEGADO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SAP_TEXTO_MATERIALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSAP_TEXTO_MATERIAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TOTAL_COSTO_PRODUCT0Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTOTAL_COSTO_PRODUCT0
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ITEMSSINPRECIORow
            Get
                Return CType(Me.Rows(index),ITEMSSINPRECIORow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event ITEMSSINPRECIORowChanging As ITEMSSINPRECIORowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event ITEMSSINPRECIORowChanged As ITEMSSINPRECIORowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event ITEMSSINPRECIORowDeleting As ITEMSSINPRECIORowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event ITEMSSINPRECIORowDeleted As ITEMSSINPRECIORowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddITEMSSINPRECIORow(ByVal row As ITEMSSINPRECIORow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddITEMSSINPRECIORow(ByVal SAP_NUM_MATERIAL_LEGADO As String, ByVal SAP_TEXTO_MATERIAL As String, ByVal TOTAL_COSTO_PRODUCT0 As Decimal) As ITEMSSINPRECIORow
            Dim rowITEMSSINPRECIORow As ITEMSSINPRECIORow = CType(Me.NewRow,ITEMSSINPRECIORow)
            Dim columnValuesArray() As Object = New Object() {SAP_NUM_MATERIAL_LEGADO, SAP_TEXTO_MATERIAL, TOTAL_COSTO_PRODUCT0}
            rowITEMSSINPRECIORow.ItemArray = columnValuesArray
            Me.Rows.Add(rowITEMSSINPRECIORow)
            Return rowITEMSSINPRECIORow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ITEMSSINPRECIODataTable = CType(MyBase.Clone,ITEMSSINPRECIODataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ITEMSSINPRECIODataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnSAP_NUM_MATERIAL_LEGADO = MyBase.Columns("SAP_NUM_MATERIAL_LEGADO")
            Me.columnSAP_TEXTO_MATERIAL = MyBase.Columns("SAP_TEXTO_MATERIAL")
            Me.columnTOTAL_COSTO_PRODUCT0 = MyBase.Columns("TOTAL_COSTO_PRODUCT0")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnSAP_NUM_MATERIAL_LEGADO = New Global.System.Data.DataColumn("SAP_NUM_MATERIAL_LEGADO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAP_NUM_MATERIAL_LEGADO)
            Me.columnSAP_TEXTO_MATERIAL = New Global.System.Data.DataColumn("SAP_TEXTO_MATERIAL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAP_TEXTO_MATERIAL)
            Me.columnTOTAL_COSTO_PRODUCT0 = New Global.System.Data.DataColumn("TOTAL_COSTO_PRODUCT0", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTOTAL_COSTO_PRODUCT0)
            Me.columnSAP_NUM_MATERIAL_LEGADO.AllowDBNull = false
            Me.columnSAP_NUM_MATERIAL_LEGADO.MaxLength = 18
            Me.columnSAP_TEXTO_MATERIAL.MaxLength = 50
            Me.ExtendedProperties.Add("Generator_RowClassName", "ITEMSSINPRECIORow")
            Me.ExtendedProperties.Add("Generator_RowEvArgName", "ITEMSSINPRECIORowChangeEvent")
            Me.ExtendedProperties.Add("Generator_RowEvHandlerName", "ITEMSSINPRECIORowChangeEventHandler")
            Me.ExtendedProperties.Add("Generator_TableClassName", "ITEMSSINPRECIODataTable")
            Me.ExtendedProperties.Add("Generator_TablePropName", "ITEMSSINPRECIO")
            Me.ExtendedProperties.Add("Generator_TableVarName", "tableITEMSSINPRECIO")
            Me.ExtendedProperties.Add("Generator_UserTableName", "ItemsSinPrecio")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewITEMSSINPRECIORow() As ITEMSSINPRECIORow
            Return CType(Me.NewRow,ITEMSSINPRECIORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ITEMSSINPRECIORow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ITEMSSINPRECIORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ITEMSSINPRECIORowChangedEvent) Is Nothing) Then
                RaiseEvent ITEMSSINPRECIORowChanged(Me, New ITEMSSINPRECIORowChangeEvent(CType(e.Row,ITEMSSINPRECIORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ITEMSSINPRECIORowChangingEvent) Is Nothing) Then
                RaiseEvent ITEMSSINPRECIORowChanging(Me, New ITEMSSINPRECIORowChangeEvent(CType(e.Row,ITEMSSINPRECIORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ITEMSSINPRECIORowDeletedEvent) Is Nothing) Then
                RaiseEvent ITEMSSINPRECIORowDeleted(Me, New ITEMSSINPRECIORowChangeEvent(CType(e.Row,ITEMSSINPRECIORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ITEMSSINPRECIORowDeletingEvent) Is Nothing) Then
                RaiseEvent ITEMSSINPRECIORowDeleting(Me, New ITEMSSINPRECIORowChangeEvent(CType(e.Row,ITEMSSINPRECIORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveITEMSSINPRECIORow(ByVal row As ITEMSSINPRECIORow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As InterfaseCostosData = New InterfaseCostosData()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ITEMSSINPRECIODataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class ItemsSinCostoRow
        Inherits Global.System.Data.DataRow
        
        Private tableItemsSinCosto As ItemsSinCostoDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableItemsSinCosto = CType(Me.Table,ItemsSinCostoDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PRO_CLAVE() As String
            Get
                Return CType(Me(Me.tableItemsSinCosto.PRO_CLAVEColumn),String)
            End Get
            Set
                Me(Me.tableItemsSinCosto.PRO_CLAVEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PRO_DESCRI() As String
            Get
                If Me.IsPRO_DESCRINull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableItemsSinCosto.PRO_DESCRIColumn),String)
                End If
            End Get
            Set
                Me(Me.tableItemsSinCosto.PRO_DESCRIColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SAP_ACTUAL_COST() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableItemsSinCosto.SAP_ACTUAL_COSTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SAP_ACTUAL_COST' in table 'ItemsSinCosto' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItemsSinCosto.SAP_ACTUAL_COSTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SAP_UOM_BASE() As String
            Get
                If Me.IsSAP_UOM_BASENull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableItemsSinCosto.SAP_UOM_BASEColumn),String)
                End If
            End Get
            Set
                Me(Me.tableItemsSinCosto.SAP_UOM_BASEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPRO_DESCRINull() As Boolean
            Return Me.IsNull(Me.tableItemsSinCosto.PRO_DESCRIColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPRO_DESCRINull()
            Me(Me.tableItemsSinCosto.PRO_DESCRIColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSAP_ACTUAL_COSTNull() As Boolean
            Return Me.IsNull(Me.tableItemsSinCosto.SAP_ACTUAL_COSTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSAP_ACTUAL_COSTNull()
            Me(Me.tableItemsSinCosto.SAP_ACTUAL_COSTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSAP_UOM_BASENull() As Boolean
            Return Me.IsNull(Me.tableItemsSinCosto.SAP_UOM_BASEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSAP_UOM_BASENull()
            Me(Me.tableItemsSinCosto.SAP_UOM_BASEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class SAP_INTERFASE_COSTOSRow
        Inherits Global.System.Data.DataRow
        
        Private tableSAP_INTERFASE_COSTOS As SAP_INTERFASE_COSTOSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSAP_INTERFASE_COSTOS = CType(Me.Table,SAP_INTERFASE_COSTOSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SAP_PERIOD() As String
            Get
                Return CType(Me(Me.tableSAP_INTERFASE_COSTOS.SAP_PERIODColumn),String)
            End Get
            Set
                Me(Me.tableSAP_INTERFASE_COSTOS.SAP_PERIODColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SAP_FISCAL_YEAR() As Integer
            Get
                Return CType(Me(Me.tableSAP_INTERFASE_COSTOS.SAP_FISCAL_YEARColumn),Integer)
            End Get
            Set
                Me(Me.tableSAP_INTERFASE_COSTOS.SAP_FISCAL_YEARColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SAP_ACTUAL_COST() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSAP_INTERFASE_COSTOS.SAP_ACTUAL_COSTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SAP_ACTUAL_COST' in table 'SAP_INTERFASE_COSTOS' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableSAP_INTERFASE_COSTOS.SAP_ACTUAL_COSTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SAP_PREVIOUS_COST() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSAP_INTERFASE_COSTOS.SAP_PREVIOUS_COSTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SAP_PREVIOUS_COST' in table 'SAP_INTERFASE_COSTOS' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableSAP_INTERFASE_COSTOS.SAP_PREVIOUS_COSTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SAP_COST_DIFFERENCES() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSAP_INTERFASE_COSTOS.SAP_COST_DIFFERENCESColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SAP_COST_DIFFERENCES' in table 'SAP_INTERFASE_COSTOS' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableSAP_INTERFASE_COSTOS.SAP_COST_DIFFERENCESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SAP_ID_MATERIAL() As String
            Get
                Try 
                    Return CType(Me(Me.tableSAP_INTERFASE_COSTOS.SAP_ID_MATERIALColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SAP_ID_MATERIAL' in table 'SAP_INTERFASE_COSTOS' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableSAP_INTERFASE_COSTOS.SAP_ID_MATERIALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SAP_TEXTO_MATERIAL() As String
            Get
                Try 
                    Return CType(Me(Me.tableSAP_INTERFASE_COSTOS.SAP_TEXTO_MATERIALColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SAP_TEXTO_MATERIAL' in table 'SAP_INTERFASE_COSTOS' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableSAP_INTERFASE_COSTOS.SAP_TEXTO_MATERIALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SAP_UOM_BASE() As String
            Get
                Try 
                    Return CType(Me(Me.tableSAP_INTERFASE_COSTOS.SAP_UOM_BASEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SAP_UOM_BASE' in table 'SAP_INTERFASE_COSTOS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSAP_INTERFASE_COSTOS.SAP_UOM_BASEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SAP_CURRENCY() As String
            Get
                Try 
                    Return CType(Me(Me.tableSAP_INTERFASE_COSTOS.SAP_CURRENCYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SAP_CURRENCY' in table 'SAP_INTERFASE_COSTOS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSAP_INTERFASE_COSTOS.SAP_CURRENCYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SAP_ID_COMPANIA() As String
            Get
                Return CType(Me(Me.tableSAP_INTERFASE_COSTOS.SAP_ID_COMPANIAColumn),String)
            End Get
            Set
                Me(Me.tableSAP_INTERFASE_COSTOS.SAP_ID_COMPANIAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SAP_PLANTA() As String
            Get
                Try 
                    Return CType(Me(Me.tableSAP_INTERFASE_COSTOS.SAP_PLANTAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SAP_PLANTA' in table 'SAP_INTERFASE_COSTOS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSAP_INTERFASE_COSTOS.SAP_PLANTAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property TIPO_DE_PRODUCTO() As String
            Get
                Try 
                    Return CType(Me(Me.tableSAP_INTERFASE_COSTOS.TIPO_DE_PRODUCTOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TIPO_DE_PRODUCTO' in table 'SAP_INTERFASE_COSTOS' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableSAP_INTERFASE_COSTOS.TIPO_DE_PRODUCTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property COSTO_FLETE_POR_UNIDAD() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSAP_INTERFASE_COSTOS.COSTO_FLETE_POR_UNIDADColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COSTO_FLETE_POR_UNIDAD' in table 'SAP_INTERFASE_COSTOS' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSAP_INTERFASE_COSTOS.COSTO_FLETE_POR_UNIDADColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property COSTO_ADUANAL_POR_UNIDAD() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSAP_INTERFASE_COSTOS.COSTO_ADUANAL_POR_UNIDADColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COSTO_ADUANAL_POR_UNIDAD' in table 'SAP_INTERFASE_COSTOS' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSAP_INTERFASE_COSTOS.COSTO_ADUANAL_POR_UNIDADColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property TOTAL_COSTO_PRODUCT0() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSAP_INTERFASE_COSTOS.TOTAL_COSTO_PRODUCT0Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TOTAL_COSTO_PRODUCT0' in table 'SAP_INTERFASE_COSTOS' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableSAP_INTERFASE_COSTOS.TOTAL_COSTO_PRODUCT0Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SAP_NUM_MATERIAL_LEGADO() As String
            Get
                Return CType(Me(Me.tableSAP_INTERFASE_COSTOS.SAP_NUM_MATERIAL_LEGADOColumn),String)
            End Get
            Set
                Me(Me.tableSAP_INTERFASE_COSTOS.SAP_NUM_MATERIAL_LEGADOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SAP_ID_SISTEMA_LEGADO() As String
            Get
                Return CType(Me(Me.tableSAP_INTERFASE_COSTOS.SAP_ID_SISTEMA_LEGADOColumn),String)
            End Get
            Set
                Me(Me.tableSAP_INTERFASE_COSTOS.SAP_ID_SISTEMA_LEGADOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSAP_ACTUAL_COSTNull() As Boolean
            Return Me.IsNull(Me.tableSAP_INTERFASE_COSTOS.SAP_ACTUAL_COSTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSAP_ACTUAL_COSTNull()
            Me(Me.tableSAP_INTERFASE_COSTOS.SAP_ACTUAL_COSTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSAP_PREVIOUS_COSTNull() As Boolean
            Return Me.IsNull(Me.tableSAP_INTERFASE_COSTOS.SAP_PREVIOUS_COSTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSAP_PREVIOUS_COSTNull()
            Me(Me.tableSAP_INTERFASE_COSTOS.SAP_PREVIOUS_COSTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSAP_COST_DIFFERENCESNull() As Boolean
            Return Me.IsNull(Me.tableSAP_INTERFASE_COSTOS.SAP_COST_DIFFERENCESColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSAP_COST_DIFFERENCESNull()
            Me(Me.tableSAP_INTERFASE_COSTOS.SAP_COST_DIFFERENCESColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSAP_ID_MATERIALNull() As Boolean
            Return Me.IsNull(Me.tableSAP_INTERFASE_COSTOS.SAP_ID_MATERIALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSAP_ID_MATERIALNull()
            Me(Me.tableSAP_INTERFASE_COSTOS.SAP_ID_MATERIALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSAP_TEXTO_MATERIALNull() As Boolean
            Return Me.IsNull(Me.tableSAP_INTERFASE_COSTOS.SAP_TEXTO_MATERIALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSAP_TEXTO_MATERIALNull()
            Me(Me.tableSAP_INTERFASE_COSTOS.SAP_TEXTO_MATERIALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSAP_UOM_BASENull() As Boolean
            Return Me.IsNull(Me.tableSAP_INTERFASE_COSTOS.SAP_UOM_BASEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSAP_UOM_BASENull()
            Me(Me.tableSAP_INTERFASE_COSTOS.SAP_UOM_BASEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSAP_CURRENCYNull() As Boolean
            Return Me.IsNull(Me.tableSAP_INTERFASE_COSTOS.SAP_CURRENCYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSAP_CURRENCYNull()
            Me(Me.tableSAP_INTERFASE_COSTOS.SAP_CURRENCYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSAP_PLANTANull() As Boolean
            Return Me.IsNull(Me.tableSAP_INTERFASE_COSTOS.SAP_PLANTAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSAP_PLANTANull()
            Me(Me.tableSAP_INTERFASE_COSTOS.SAP_PLANTAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsTIPO_DE_PRODUCTONull() As Boolean
            Return Me.IsNull(Me.tableSAP_INTERFASE_COSTOS.TIPO_DE_PRODUCTOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetTIPO_DE_PRODUCTONull()
            Me(Me.tableSAP_INTERFASE_COSTOS.TIPO_DE_PRODUCTOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCOSTO_FLETE_POR_UNIDADNull() As Boolean
            Return Me.IsNull(Me.tableSAP_INTERFASE_COSTOS.COSTO_FLETE_POR_UNIDADColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCOSTO_FLETE_POR_UNIDADNull()
            Me(Me.tableSAP_INTERFASE_COSTOS.COSTO_FLETE_POR_UNIDADColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCOSTO_ADUANAL_POR_UNIDADNull() As Boolean
            Return Me.IsNull(Me.tableSAP_INTERFASE_COSTOS.COSTO_ADUANAL_POR_UNIDADColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCOSTO_ADUANAL_POR_UNIDADNull()
            Me(Me.tableSAP_INTERFASE_COSTOS.COSTO_ADUANAL_POR_UNIDADColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsTOTAL_COSTO_PRODUCT0Null() As Boolean
            Return Me.IsNull(Me.tableSAP_INTERFASE_COSTOS.TOTAL_COSTO_PRODUCT0Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetTOTAL_COSTO_PRODUCT0Null()
            Me(Me.tableSAP_INTERFASE_COSTOS.TOTAL_COSTO_PRODUCT0Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class ITEMSSINPRECIORow
        Inherits Global.System.Data.DataRow
        
        Private tableITEMSSINPRECIO As ITEMSSINPRECIODataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableITEMSSINPRECIO = CType(Me.Table,ITEMSSINPRECIODataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SAP_NUM_MATERIAL_LEGADO() As String
            Get
                Return CType(Me(Me.tableITEMSSINPRECIO.SAP_NUM_MATERIAL_LEGADOColumn),String)
            End Get
            Set
                Me(Me.tableITEMSSINPRECIO.SAP_NUM_MATERIAL_LEGADOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SAP_TEXTO_MATERIAL() As String
            Get
                Try 
                    Return CType(Me(Me.tableITEMSSINPRECIO.SAP_TEXTO_MATERIALColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SAP_TEXTO_MATERIAL' in table 'ItemsSinPrecio' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableITEMSSINPRECIO.SAP_TEXTO_MATERIALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property TOTAL_COSTO_PRODUCT0() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableITEMSSINPRECIO.TOTAL_COSTO_PRODUCT0Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TOTAL_COSTO_PRODUCT0' in table 'ItemsSinPrecio' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableITEMSSINPRECIO.TOTAL_COSTO_PRODUCT0Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSAP_TEXTO_MATERIALNull() As Boolean
            Return Me.IsNull(Me.tableITEMSSINPRECIO.SAP_TEXTO_MATERIALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSAP_TEXTO_MATERIALNull()
            Me(Me.tableITEMSSINPRECIO.SAP_TEXTO_MATERIALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsTOTAL_COSTO_PRODUCT0Null() As Boolean
            Return Me.IsNull(Me.tableITEMSSINPRECIO.TOTAL_COSTO_PRODUCT0Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetTOTAL_COSTO_PRODUCT0Null()
            Me(Me.tableITEMSSINPRECIO.TOTAL_COSTO_PRODUCT0Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class ItemsSinCostoRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ItemsSinCostoRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As ItemsSinCostoRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As ItemsSinCostoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class SAP_INTERFASE_COSTOSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SAP_INTERFASE_COSTOSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As SAP_INTERFASE_COSTOSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As SAP_INTERFASE_COSTOSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class ITEMSSINPRECIORowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ITEMSSINPRECIORow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As ITEMSSINPRECIORow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As ITEMSSINPRECIORow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
