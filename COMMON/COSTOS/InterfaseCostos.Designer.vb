'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.1
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("InterfaseCostos"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class InterfaseCostos
    Inherits Global.System.Data.DataSet
    
    Private tableINTERFASESCOSTOS As INTERFASESCOSTOSDataTable
    
    Private tableCOSTOSANTERIOR As COSTOSANTERIORDataTable
    
    Private tableCOSTOPROMEDIO As COSTOPROMEDIODataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("INTERFASESCOSTOS")) Is Nothing) Then
                MyBase.Tables.Add(New INTERFASESCOSTOSDataTable(ds.Tables("INTERFASESCOSTOS")))
            End If
            If (Not (ds.Tables("COSTOSANTERIOR")) Is Nothing) Then
                MyBase.Tables.Add(New COSTOSANTERIORDataTable(ds.Tables("COSTOSANTERIOR")))
            End If
            If (Not (ds.Tables("COSTOPROMEDIO")) Is Nothing) Then
                MyBase.Tables.Add(New COSTOPROMEDIODataTable(ds.Tables("COSTOPROMEDIO")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property INTERFASESCOSTOS() As INTERFASESCOSTOSDataTable
        Get
            Return Me.tableINTERFASESCOSTOS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property COSTOSANTERIOR() As COSTOSANTERIORDataTable
        Get
            Return Me.tableCOSTOSANTERIOR
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property COSTOPROMEDIO() As COSTOPROMEDIODataTable
        Get
            Return Me.tableCOSTOPROMEDIO
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As InterfaseCostos = CType(MyBase.Clone,InterfaseCostos)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXml(reader)
            If (Not (ds.Tables("INTERFASESCOSTOS")) Is Nothing) Then
                MyBase.Tables.Add(New INTERFASESCOSTOSDataTable(ds.Tables("INTERFASESCOSTOS")))
            End If
            If (Not (ds.Tables("COSTOSANTERIOR")) Is Nothing) Then
                MyBase.Tables.Add(New COSTOSANTERIORDataTable(ds.Tables("COSTOSANTERIOR")))
            End If
            If (Not (ds.Tables("COSTOPROMEDIO")) Is Nothing) Then
                MyBase.Tables.Add(New COSTOPROMEDIODataTable(ds.Tables("COSTOPROMEDIO")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableINTERFASESCOSTOS = CType(MyBase.Tables("INTERFASESCOSTOS"),INTERFASESCOSTOSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableINTERFASESCOSTOS) Is Nothing) Then
                Me.tableINTERFASESCOSTOS.InitVars
            End If
        End If
        Me.tableCOSTOSANTERIOR = CType(MyBase.Tables("COSTOSANTERIOR"),COSTOSANTERIORDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCOSTOSANTERIOR) Is Nothing) Then
                Me.tableCOSTOSANTERIOR.InitVars
            End If
        End If
        Me.tableCOSTOPROMEDIO = CType(MyBase.Tables("COSTOPROMEDIO"),COSTOPROMEDIODataTable)
        If (initTable = true) Then
            If (Not (Me.tableCOSTOPROMEDIO) Is Nothing) Then
                Me.tableCOSTOPROMEDIO.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Sub InitClass()
        Me.DataSetName = "InterfaseCostos"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/InterfaseCostos.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableINTERFASESCOSTOS = New INTERFASESCOSTOSDataTable()
        MyBase.Tables.Add(Me.tableINTERFASESCOSTOS)
        Me.tableCOSTOSANTERIOR = New COSTOSANTERIORDataTable()
        MyBase.Tables.Add(Me.tableCOSTOSANTERIOR)
        Me.tableCOSTOPROMEDIO = New COSTOPROMEDIODataTable()
        MyBase.Tables.Add(Me.tableCOSTOPROMEDIO)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeINTERFASESCOSTOS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeCOSTOSANTERIOR() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeCOSTOPROMEDIO() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As InterfaseCostos = New InterfaseCostos()
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub INTERFASESCOSTOSRowChangeEventHandler(ByVal sender As Object, ByVal e As INTERFASESCOSTOSRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub COSTOSANTERIORRowChangeEventHandler(ByVal sender As Object, ByVal e As COSTOSANTERIORRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub COSTOPROMEDIORowChangeEventHandler(ByVal sender As Object, ByVal e As COSTOPROMEDIORowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class INTERFASESCOSTOSDataTable
        Inherits Global.System.Data.TypedTableBase(Of INTERFASESCOSTOSRow)
        
        Private columnSAP_PERIOD As Global.System.Data.DataColumn
        
        Private columnSAP_FISCAL_YEAR As Global.System.Data.DataColumn
        
        Private columnSAP_ACTUAL_COST As Global.System.Data.DataColumn
        
        Private columnSAP_PREVIOUS_COST As Global.System.Data.DataColumn
        
        Private columnSAP_COST_DIFFERENCES As Global.System.Data.DataColumn
        
        Private columnSAP_ID_MATERIAL As Global.System.Data.DataColumn
        
        Private columnSAP_TEXTO_MATERIAL As Global.System.Data.DataColumn
        
        Private columnSAP_UOM_BASE As Global.System.Data.DataColumn
        
        Private columnSAP_CURRENCY As Global.System.Data.DataColumn
        
        Private columnSAP_ID_COMPANIA As Global.System.Data.DataColumn
        
        Private columnSAP_PLANTA As Global.System.Data.DataColumn
        
        Private columnTIPO_DE_PRODUCTO As Global.System.Data.DataColumn
        
        Private columnCOSTO_FLETE_POR_UNIDAD As Global.System.Data.DataColumn
        
        Private columnCOSTO_ADUANAL_POR_UNIDAD As Global.System.Data.DataColumn
        
        Private columnTOTAL_COSTO_PRODUCT0 As Global.System.Data.DataColumn
        
        Private columnSAP_NUM_MATERIAL_LEGADO As Global.System.Data.DataColumn
        
        Private columnSAP_ID_SISTEMA_LEGADO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "INTERFASESCOSTOS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SAP_PERIODColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSAP_PERIOD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SAP_FISCAL_YEARColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSAP_FISCAL_YEAR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SAP_ACTUAL_COSTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSAP_ACTUAL_COST
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SAP_PREVIOUS_COSTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSAP_PREVIOUS_COST
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SAP_COST_DIFFERENCESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSAP_COST_DIFFERENCES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SAP_ID_MATERIALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSAP_ID_MATERIAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SAP_TEXTO_MATERIALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSAP_TEXTO_MATERIAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SAP_UOM_BASEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSAP_UOM_BASE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SAP_CURRENCYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSAP_CURRENCY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SAP_ID_COMPANIAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSAP_ID_COMPANIA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SAP_PLANTAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSAP_PLANTA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TIPO_DE_PRODUCTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTIPO_DE_PRODUCTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property COSTO_FLETE_POR_UNIDADColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOSTO_FLETE_POR_UNIDAD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property COSTO_ADUANAL_POR_UNIDADColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOSTO_ADUANAL_POR_UNIDAD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TOTAL_COSTO_PRODUCT0Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTOTAL_COSTO_PRODUCT0
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SAP_NUM_MATERIAL_LEGADOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSAP_NUM_MATERIAL_LEGADO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SAP_ID_SISTEMA_LEGADOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSAP_ID_SISTEMA_LEGADO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As INTERFASESCOSTOSRow
            Get
                Return CType(Me.Rows(index),INTERFASESCOSTOSRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event INTERFASESCOSTOSRowChanging As INTERFASESCOSTOSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event INTERFASESCOSTOSRowChanged As INTERFASESCOSTOSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event INTERFASESCOSTOSRowDeleting As INTERFASESCOSTOSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event INTERFASESCOSTOSRowDeleted As INTERFASESCOSTOSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddINTERFASESCOSTOSRow(ByVal row As INTERFASESCOSTOSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddINTERFASESCOSTOSRow( _
                    ByVal SAP_PERIOD As String,  _
                    ByVal SAP_FISCAL_YEAR As Decimal,  _
                    ByVal SAP_ACTUAL_COST As Double,  _
                    ByVal SAP_PREVIOUS_COST As Double,  _
                    ByVal SAP_COST_DIFFERENCES As Double,  _
                    ByVal SAP_ID_MATERIAL As String,  _
                    ByVal SAP_TEXTO_MATERIAL As String,  _
                    ByVal SAP_UOM_BASE As String,  _
                    ByVal SAP_CURRENCY As String,  _
                    ByVal SAP_ID_COMPANIA As String,  _
                    ByVal SAP_PLANTA As String,  _
                    ByVal TIPO_DE_PRODUCTO As String,  _
                    ByVal COSTO_FLETE_POR_UNIDAD As Decimal,  _
                    ByVal COSTO_ADUANAL_POR_UNIDAD As Decimal,  _
                    ByVal TOTAL_COSTO_PRODUCT0 As Decimal,  _
                    ByVal SAP_NUM_MATERIAL_LEGADO As String,  _
                    ByVal SAP_ID_SISTEMA_LEGADO As String) As INTERFASESCOSTOSRow
            Dim rowINTERFASESCOSTOSRow As INTERFASESCOSTOSRow = CType(Me.NewRow,INTERFASESCOSTOSRow)
            Dim columnValuesArray() As Object = New Object() {SAP_PERIOD, SAP_FISCAL_YEAR, SAP_ACTUAL_COST, SAP_PREVIOUS_COST, SAP_COST_DIFFERENCES, SAP_ID_MATERIAL, SAP_TEXTO_MATERIAL, SAP_UOM_BASE, SAP_CURRENCY, SAP_ID_COMPANIA, SAP_PLANTA, TIPO_DE_PRODUCTO, COSTO_FLETE_POR_UNIDAD, COSTO_ADUANAL_POR_UNIDAD, TOTAL_COSTO_PRODUCT0, SAP_NUM_MATERIAL_LEGADO, SAP_ID_SISTEMA_LEGADO}
            rowINTERFASESCOSTOSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowINTERFASESCOSTOSRow)
            Return rowINTERFASESCOSTOSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As INTERFASESCOSTOSDataTable = CType(MyBase.Clone,INTERFASESCOSTOSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New INTERFASESCOSTOSDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnSAP_PERIOD = MyBase.Columns("SAP_PERIOD")
            Me.columnSAP_FISCAL_YEAR = MyBase.Columns("SAP_FISCAL_YEAR")
            Me.columnSAP_ACTUAL_COST = MyBase.Columns("SAP_ACTUAL_COST")
            Me.columnSAP_PREVIOUS_COST = MyBase.Columns("SAP_PREVIOUS_COST")
            Me.columnSAP_COST_DIFFERENCES = MyBase.Columns("SAP_COST_DIFFERENCES")
            Me.columnSAP_ID_MATERIAL = MyBase.Columns("SAP_ID_MATERIAL")
            Me.columnSAP_TEXTO_MATERIAL = MyBase.Columns("SAP_TEXTO_MATERIAL")
            Me.columnSAP_UOM_BASE = MyBase.Columns("SAP_UOM_BASE")
            Me.columnSAP_CURRENCY = MyBase.Columns("SAP_CURRENCY")
            Me.columnSAP_ID_COMPANIA = MyBase.Columns("SAP_ID_COMPANIA")
            Me.columnSAP_PLANTA = MyBase.Columns("SAP_PLANTA")
            Me.columnTIPO_DE_PRODUCTO = MyBase.Columns("TIPO_DE_PRODUCTO")
            Me.columnCOSTO_FLETE_POR_UNIDAD = MyBase.Columns("COSTO_FLETE_POR_UNIDAD")
            Me.columnCOSTO_ADUANAL_POR_UNIDAD = MyBase.Columns("COSTO_ADUANAL_POR_UNIDAD")
            Me.columnTOTAL_COSTO_PRODUCT0 = MyBase.Columns("TOTAL_COSTO_PRODUCT0")
            Me.columnSAP_NUM_MATERIAL_LEGADO = MyBase.Columns("SAP_NUM_MATERIAL_LEGADO")
            Me.columnSAP_ID_SISTEMA_LEGADO = MyBase.Columns("SAP_ID_SISTEMA_LEGADO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnSAP_PERIOD = New Global.System.Data.DataColumn("SAP_PERIOD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAP_PERIOD)
            Me.columnSAP_FISCAL_YEAR = New Global.System.Data.DataColumn("SAP_FISCAL_YEAR", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAP_FISCAL_YEAR)
            Me.columnSAP_ACTUAL_COST = New Global.System.Data.DataColumn("SAP_ACTUAL_COST", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAP_ACTUAL_COST)
            Me.columnSAP_PREVIOUS_COST = New Global.System.Data.DataColumn("SAP_PREVIOUS_COST", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAP_PREVIOUS_COST)
            Me.columnSAP_COST_DIFFERENCES = New Global.System.Data.DataColumn("SAP_COST_DIFFERENCES", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAP_COST_DIFFERENCES)
            Me.columnSAP_ID_MATERIAL = New Global.System.Data.DataColumn("SAP_ID_MATERIAL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAP_ID_MATERIAL)
            Me.columnSAP_TEXTO_MATERIAL = New Global.System.Data.DataColumn("SAP_TEXTO_MATERIAL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAP_TEXTO_MATERIAL)
            Me.columnSAP_UOM_BASE = New Global.System.Data.DataColumn("SAP_UOM_BASE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAP_UOM_BASE)
            Me.columnSAP_CURRENCY = New Global.System.Data.DataColumn("SAP_CURRENCY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAP_CURRENCY)
            Me.columnSAP_ID_COMPANIA = New Global.System.Data.DataColumn("SAP_ID_COMPANIA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAP_ID_COMPANIA)
            Me.columnSAP_PLANTA = New Global.System.Data.DataColumn("SAP_PLANTA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAP_PLANTA)
            Me.columnTIPO_DE_PRODUCTO = New Global.System.Data.DataColumn("TIPO_DE_PRODUCTO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIPO_DE_PRODUCTO)
            Me.columnCOSTO_FLETE_POR_UNIDAD = New Global.System.Data.DataColumn("COSTO_FLETE_POR_UNIDAD", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOSTO_FLETE_POR_UNIDAD)
            Me.columnCOSTO_ADUANAL_POR_UNIDAD = New Global.System.Data.DataColumn("COSTO_ADUANAL_POR_UNIDAD", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOSTO_ADUANAL_POR_UNIDAD)
            Me.columnTOTAL_COSTO_PRODUCT0 = New Global.System.Data.DataColumn("TOTAL_COSTO_PRODUCT0", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTOTAL_COSTO_PRODUCT0)
            Me.columnSAP_NUM_MATERIAL_LEGADO = New Global.System.Data.DataColumn("SAP_NUM_MATERIAL_LEGADO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAP_NUM_MATERIAL_LEGADO)
            Me.columnSAP_ID_SISTEMA_LEGADO = New Global.System.Data.DataColumn("SAP_ID_SISTEMA_LEGADO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAP_ID_SISTEMA_LEGADO)
            Me.columnSAP_PERIOD.AllowDBNull = false
            Me.columnSAP_PERIOD.MaxLength = 3
            Me.columnSAP_FISCAL_YEAR.AllowDBNull = false
            Me.columnSAP_ID_MATERIAL.MaxLength = 18
            Me.columnSAP_TEXTO_MATERIAL.MaxLength = 50
            Me.columnSAP_UOM_BASE.MaxLength = 4
            Me.columnSAP_CURRENCY.MaxLength = 5
            Me.columnSAP_ID_COMPANIA.AllowDBNull = false
            Me.columnSAP_ID_COMPANIA.MaxLength = 4
            Me.columnSAP_PLANTA.MaxLength = 4
            Me.columnTIPO_DE_PRODUCTO.MaxLength = 2
            Me.columnSAP_NUM_MATERIAL_LEGADO.AllowDBNull = false
            Me.columnSAP_NUM_MATERIAL_LEGADO.MaxLength = 18
            Me.columnSAP_ID_SISTEMA_LEGADO.AllowDBNull = false
            Me.columnSAP_ID_SISTEMA_LEGADO.MaxLength = 15
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewINTERFASESCOSTOSRow() As INTERFASESCOSTOSRow
            Return CType(Me.NewRow,INTERFASESCOSTOSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New INTERFASESCOSTOSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(INTERFASESCOSTOSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.INTERFASESCOSTOSRowChangedEvent) Is Nothing) Then
                RaiseEvent INTERFASESCOSTOSRowChanged(Me, New INTERFASESCOSTOSRowChangeEvent(CType(e.Row,INTERFASESCOSTOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.INTERFASESCOSTOSRowChangingEvent) Is Nothing) Then
                RaiseEvent INTERFASESCOSTOSRowChanging(Me, New INTERFASESCOSTOSRowChangeEvent(CType(e.Row,INTERFASESCOSTOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.INTERFASESCOSTOSRowDeletedEvent) Is Nothing) Then
                RaiseEvent INTERFASESCOSTOSRowDeleted(Me, New INTERFASESCOSTOSRowChangeEvent(CType(e.Row,INTERFASESCOSTOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.INTERFASESCOSTOSRowDeletingEvent) Is Nothing) Then
                RaiseEvent INTERFASESCOSTOSRowDeleting(Me, New INTERFASESCOSTOSRowChangeEvent(CType(e.Row,INTERFASESCOSTOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveINTERFASESCOSTOSRow(ByVal row As INTERFASESCOSTOSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As InterfaseCostos = New InterfaseCostos()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "INTERFASESCOSTOSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class COSTOSANTERIORDataTable
        Inherits Global.System.Data.TypedTableBase(Of COSTOSANTERIORRow)
        
        Private columnSAP_ID_MATERIAL As Global.System.Data.DataColumn
        
        Private columnSAP_NUM_MATERIAL_LEGADO As Global.System.Data.DataColumn
        
        Private columnSAP_ACTUAL_COST As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "COSTOSANTERIOR"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SAP_ID_MATERIALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSAP_ID_MATERIAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SAP_NUM_MATERIAL_LEGADOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSAP_NUM_MATERIAL_LEGADO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SAP_ACTUAL_COSTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSAP_ACTUAL_COST
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As COSTOSANTERIORRow
            Get
                Return CType(Me.Rows(index),COSTOSANTERIORRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event COSTOSANTERIORRowChanging As COSTOSANTERIORRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event COSTOSANTERIORRowChanged As COSTOSANTERIORRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event COSTOSANTERIORRowDeleting As COSTOSANTERIORRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event COSTOSANTERIORRowDeleted As COSTOSANTERIORRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddCOSTOSANTERIORRow(ByVal row As COSTOSANTERIORRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddCOSTOSANTERIORRow(ByVal SAP_ID_MATERIAL As String, ByVal SAP_NUM_MATERIAL_LEGADO As String, ByVal SAP_ACTUAL_COST As Double) As COSTOSANTERIORRow
            Dim rowCOSTOSANTERIORRow As COSTOSANTERIORRow = CType(Me.NewRow,COSTOSANTERIORRow)
            Dim columnValuesArray() As Object = New Object() {SAP_ID_MATERIAL, SAP_NUM_MATERIAL_LEGADO, SAP_ACTUAL_COST}
            rowCOSTOSANTERIORRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCOSTOSANTERIORRow)
            Return rowCOSTOSANTERIORRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As COSTOSANTERIORDataTable = CType(MyBase.Clone,COSTOSANTERIORDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New COSTOSANTERIORDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnSAP_ID_MATERIAL = MyBase.Columns("SAP_ID_MATERIAL")
            Me.columnSAP_NUM_MATERIAL_LEGADO = MyBase.Columns("SAP_NUM_MATERIAL_LEGADO")
            Me.columnSAP_ACTUAL_COST = MyBase.Columns("SAP_ACTUAL_COST")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnSAP_ID_MATERIAL = New Global.System.Data.DataColumn("SAP_ID_MATERIAL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAP_ID_MATERIAL)
            Me.columnSAP_NUM_MATERIAL_LEGADO = New Global.System.Data.DataColumn("SAP_NUM_MATERIAL_LEGADO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAP_NUM_MATERIAL_LEGADO)
            Me.columnSAP_ACTUAL_COST = New Global.System.Data.DataColumn("SAP_ACTUAL_COST", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAP_ACTUAL_COST)
            Me.columnSAP_ID_MATERIAL.MaxLength = 18
            Me.columnSAP_NUM_MATERIAL_LEGADO.AllowDBNull = false
            Me.columnSAP_NUM_MATERIAL_LEGADO.MaxLength = 18
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewCOSTOSANTERIORRow() As COSTOSANTERIORRow
            Return CType(Me.NewRow,COSTOSANTERIORRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New COSTOSANTERIORRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(COSTOSANTERIORRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.COSTOSANTERIORRowChangedEvent) Is Nothing) Then
                RaiseEvent COSTOSANTERIORRowChanged(Me, New COSTOSANTERIORRowChangeEvent(CType(e.Row,COSTOSANTERIORRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.COSTOSANTERIORRowChangingEvent) Is Nothing) Then
                RaiseEvent COSTOSANTERIORRowChanging(Me, New COSTOSANTERIORRowChangeEvent(CType(e.Row,COSTOSANTERIORRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.COSTOSANTERIORRowDeletedEvent) Is Nothing) Then
                RaiseEvent COSTOSANTERIORRowDeleted(Me, New COSTOSANTERIORRowChangeEvent(CType(e.Row,COSTOSANTERIORRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.COSTOSANTERIORRowDeletingEvent) Is Nothing) Then
                RaiseEvent COSTOSANTERIORRowDeleting(Me, New COSTOSANTERIORRowChangeEvent(CType(e.Row,COSTOSANTERIORRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveCOSTOSANTERIORRow(ByVal row As COSTOSANTERIORRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As InterfaseCostos = New InterfaseCostos()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "COSTOSANTERIORDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class COSTOPROMEDIODataTable
        Inherits Global.System.Data.TypedTableBase(Of COSTOPROMEDIORow)
        
        Private columnPRO_CLAVE As Global.System.Data.DataColumn
        
        Private columnCANTIDAD As Global.System.Data.DataColumn
        
        Private columnML As Global.System.Data.DataColumn
        
        Private _columnM_ As Global.System.Data.DataColumn
        
        Private columnARANCEL As Global.System.Data.DataColumn
        
        Private columnFLETE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "COSTOPROMEDIO"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PRO_CLAVEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRO_CLAVE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CANTIDADColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCANTIDAD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MLColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnML
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property _M_Column() As Global.System.Data.DataColumn
            Get
                Return Me._columnM_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ARANCELColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnARANCEL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FLETEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFLETE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As COSTOPROMEDIORow
            Get
                Return CType(Me.Rows(index),COSTOPROMEDIORow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event COSTOPROMEDIORowChanging As COSTOPROMEDIORowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event COSTOPROMEDIORowChanged As COSTOPROMEDIORowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event COSTOPROMEDIORowDeleting As COSTOPROMEDIORowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event COSTOPROMEDIORowDeleted As COSTOPROMEDIORowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddCOSTOPROMEDIORow(ByVal row As COSTOPROMEDIORow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddCOSTOPROMEDIORow(ByVal PRO_CLAVE As String, ByVal CANTIDAD As Decimal, ByVal ML As Decimal, ByVal _M_ As Decimal, ByVal ARANCEL As Decimal, ByVal FLETE As Decimal) As COSTOPROMEDIORow
            Dim rowCOSTOPROMEDIORow As COSTOPROMEDIORow = CType(Me.NewRow,COSTOPROMEDIORow)
            Dim columnValuesArray() As Object = New Object() {PRO_CLAVE, CANTIDAD, ML, _M_, ARANCEL, FLETE}
            rowCOSTOPROMEDIORow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCOSTOPROMEDIORow)
            Return rowCOSTOPROMEDIORow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As COSTOPROMEDIODataTable = CType(MyBase.Clone,COSTOPROMEDIODataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New COSTOPROMEDIODataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnPRO_CLAVE = MyBase.Columns("PRO_CLAVE")
            Me.columnCANTIDAD = MyBase.Columns("CANTIDAD")
            Me.columnML = MyBase.Columns("ML")
            Me._columnM_ = MyBase.Columns("M$")
            Me.columnARANCEL = MyBase.Columns("ARANCEL")
            Me.columnFLETE = MyBase.Columns("FLETE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnPRO_CLAVE = New Global.System.Data.DataColumn("PRO_CLAVE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRO_CLAVE)
            Me.columnCANTIDAD = New Global.System.Data.DataColumn("CANTIDAD", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCANTIDAD)
            Me.columnML = New Global.System.Data.DataColumn("ML", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnML)
            Me._columnM_ = New Global.System.Data.DataColumn("M$", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            Me._columnM_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnM_")
            Me._columnM_.ExtendedProperties.Add("Generator_UserColumnName", "M$")
            MyBase.Columns.Add(Me._columnM_)
            Me.columnARANCEL = New Global.System.Data.DataColumn("ARANCEL", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnARANCEL)
            Me.columnFLETE = New Global.System.Data.DataColumn("FLETE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFLETE)
            Me.columnPRO_CLAVE.AllowDBNull = false
            Me.columnPRO_CLAVE.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewCOSTOPROMEDIORow() As COSTOPROMEDIORow
            Return CType(Me.NewRow,COSTOPROMEDIORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New COSTOPROMEDIORow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(COSTOPROMEDIORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.COSTOPROMEDIORowChangedEvent) Is Nothing) Then
                RaiseEvent COSTOPROMEDIORowChanged(Me, New COSTOPROMEDIORowChangeEvent(CType(e.Row,COSTOPROMEDIORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.COSTOPROMEDIORowChangingEvent) Is Nothing) Then
                RaiseEvent COSTOPROMEDIORowChanging(Me, New COSTOPROMEDIORowChangeEvent(CType(e.Row,COSTOPROMEDIORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.COSTOPROMEDIORowDeletedEvent) Is Nothing) Then
                RaiseEvent COSTOPROMEDIORowDeleted(Me, New COSTOPROMEDIORowChangeEvent(CType(e.Row,COSTOPROMEDIORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.COSTOPROMEDIORowDeletingEvent) Is Nothing) Then
                RaiseEvent COSTOPROMEDIORowDeleting(Me, New COSTOPROMEDIORowChangeEvent(CType(e.Row,COSTOPROMEDIORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveCOSTOPROMEDIORow(ByVal row As COSTOPROMEDIORow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As InterfaseCostos = New InterfaseCostos()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "COSTOPROMEDIODataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class INTERFASESCOSTOSRow
        Inherits Global.System.Data.DataRow
        
        Private tableINTERFASESCOSTOS As INTERFASESCOSTOSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableINTERFASESCOSTOS = CType(Me.Table,INTERFASESCOSTOSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SAP_PERIOD() As String
            Get
                Return CType(Me(Me.tableINTERFASESCOSTOS.SAP_PERIODColumn),String)
            End Get
            Set
                Me(Me.tableINTERFASESCOSTOS.SAP_PERIODColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SAP_FISCAL_YEAR() As Decimal
            Get
                Return CType(Me(Me.tableINTERFASESCOSTOS.SAP_FISCAL_YEARColumn),Decimal)
            End Get
            Set
                Me(Me.tableINTERFASESCOSTOS.SAP_FISCAL_YEARColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SAP_ACTUAL_COST() As Double
            Get
                Try 
                    Return CType(Me(Me.tableINTERFASESCOSTOS.SAP_ACTUAL_COSTColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SAP_ACTUAL_COST' in table 'INTERFASESCOSTOS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINTERFASESCOSTOS.SAP_ACTUAL_COSTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SAP_PREVIOUS_COST() As Double
            Get
                Try 
                    Return CType(Me(Me.tableINTERFASESCOSTOS.SAP_PREVIOUS_COSTColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SAP_PREVIOUS_COST' in table 'INTERFASESCOSTOS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINTERFASESCOSTOS.SAP_PREVIOUS_COSTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SAP_COST_DIFFERENCES() As Double
            Get
                Try 
                    Return CType(Me(Me.tableINTERFASESCOSTOS.SAP_COST_DIFFERENCESColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SAP_COST_DIFFERENCES' in table 'INTERFASESCOSTOS' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableINTERFASESCOSTOS.SAP_COST_DIFFERENCESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SAP_ID_MATERIAL() As String
            Get
                Try 
                    Return CType(Me(Me.tableINTERFASESCOSTOS.SAP_ID_MATERIALColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SAP_ID_MATERIAL' in table 'INTERFASESCOSTOS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINTERFASESCOSTOS.SAP_ID_MATERIALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SAP_TEXTO_MATERIAL() As String
            Get
                Try 
                    Return CType(Me(Me.tableINTERFASESCOSTOS.SAP_TEXTO_MATERIALColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SAP_TEXTO_MATERIAL' in table 'INTERFASESCOSTOS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINTERFASESCOSTOS.SAP_TEXTO_MATERIALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SAP_UOM_BASE() As String
            Get
                Try 
                    Return CType(Me(Me.tableINTERFASESCOSTOS.SAP_UOM_BASEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SAP_UOM_BASE' in table 'INTERFASESCOSTOS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINTERFASESCOSTOS.SAP_UOM_BASEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SAP_CURRENCY() As String
            Get
                Try 
                    Return CType(Me(Me.tableINTERFASESCOSTOS.SAP_CURRENCYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SAP_CURRENCY' in table 'INTERFASESCOSTOS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINTERFASESCOSTOS.SAP_CURRENCYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SAP_ID_COMPANIA() As String
            Get
                Return CType(Me(Me.tableINTERFASESCOSTOS.SAP_ID_COMPANIAColumn),String)
            End Get
            Set
                Me(Me.tableINTERFASESCOSTOS.SAP_ID_COMPANIAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SAP_PLANTA() As String
            Get
                Try 
                    Return CType(Me(Me.tableINTERFASESCOSTOS.SAP_PLANTAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SAP_PLANTA' in table 'INTERFASESCOSTOS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINTERFASESCOSTOS.SAP_PLANTAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property TIPO_DE_PRODUCTO() As String
            Get
                Try 
                    Return CType(Me(Me.tableINTERFASESCOSTOS.TIPO_DE_PRODUCTOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TIPO_DE_PRODUCTO' in table 'INTERFASESCOSTOS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINTERFASESCOSTOS.TIPO_DE_PRODUCTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property COSTO_FLETE_POR_UNIDAD() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINTERFASESCOSTOS.COSTO_FLETE_POR_UNIDADColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COSTO_FLETE_POR_UNIDAD' in table 'INTERFASESCOSTOS' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableINTERFASESCOSTOS.COSTO_FLETE_POR_UNIDADColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property COSTO_ADUANAL_POR_UNIDAD() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINTERFASESCOSTOS.COSTO_ADUANAL_POR_UNIDADColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COSTO_ADUANAL_POR_UNIDAD' in table 'INTERFASESCOSTOS' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableINTERFASESCOSTOS.COSTO_ADUANAL_POR_UNIDADColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property TOTAL_COSTO_PRODUCT0() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINTERFASESCOSTOS.TOTAL_COSTO_PRODUCT0Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TOTAL_COSTO_PRODUCT0' in table 'INTERFASESCOSTOS' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableINTERFASESCOSTOS.TOTAL_COSTO_PRODUCT0Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SAP_NUM_MATERIAL_LEGADO() As String
            Get
                Return CType(Me(Me.tableINTERFASESCOSTOS.SAP_NUM_MATERIAL_LEGADOColumn),String)
            End Get
            Set
                Me(Me.tableINTERFASESCOSTOS.SAP_NUM_MATERIAL_LEGADOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SAP_ID_SISTEMA_LEGADO() As String
            Get
                Return CType(Me(Me.tableINTERFASESCOSTOS.SAP_ID_SISTEMA_LEGADOColumn),String)
            End Get
            Set
                Me(Me.tableINTERFASESCOSTOS.SAP_ID_SISTEMA_LEGADOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSAP_ACTUAL_COSTNull() As Boolean
            Return Me.IsNull(Me.tableINTERFASESCOSTOS.SAP_ACTUAL_COSTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSAP_ACTUAL_COSTNull()
            Me(Me.tableINTERFASESCOSTOS.SAP_ACTUAL_COSTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSAP_PREVIOUS_COSTNull() As Boolean
            Return Me.IsNull(Me.tableINTERFASESCOSTOS.SAP_PREVIOUS_COSTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSAP_PREVIOUS_COSTNull()
            Me(Me.tableINTERFASESCOSTOS.SAP_PREVIOUS_COSTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSAP_COST_DIFFERENCESNull() As Boolean
            Return Me.IsNull(Me.tableINTERFASESCOSTOS.SAP_COST_DIFFERENCESColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSAP_COST_DIFFERENCESNull()
            Me(Me.tableINTERFASESCOSTOS.SAP_COST_DIFFERENCESColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSAP_ID_MATERIALNull() As Boolean
            Return Me.IsNull(Me.tableINTERFASESCOSTOS.SAP_ID_MATERIALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSAP_ID_MATERIALNull()
            Me(Me.tableINTERFASESCOSTOS.SAP_ID_MATERIALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSAP_TEXTO_MATERIALNull() As Boolean
            Return Me.IsNull(Me.tableINTERFASESCOSTOS.SAP_TEXTO_MATERIALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSAP_TEXTO_MATERIALNull()
            Me(Me.tableINTERFASESCOSTOS.SAP_TEXTO_MATERIALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSAP_UOM_BASENull() As Boolean
            Return Me.IsNull(Me.tableINTERFASESCOSTOS.SAP_UOM_BASEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSAP_UOM_BASENull()
            Me(Me.tableINTERFASESCOSTOS.SAP_UOM_BASEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSAP_CURRENCYNull() As Boolean
            Return Me.IsNull(Me.tableINTERFASESCOSTOS.SAP_CURRENCYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSAP_CURRENCYNull()
            Me(Me.tableINTERFASESCOSTOS.SAP_CURRENCYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSAP_PLANTANull() As Boolean
            Return Me.IsNull(Me.tableINTERFASESCOSTOS.SAP_PLANTAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSAP_PLANTANull()
            Me(Me.tableINTERFASESCOSTOS.SAP_PLANTAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsTIPO_DE_PRODUCTONull() As Boolean
            Return Me.IsNull(Me.tableINTERFASESCOSTOS.TIPO_DE_PRODUCTOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetTIPO_DE_PRODUCTONull()
            Me(Me.tableINTERFASESCOSTOS.TIPO_DE_PRODUCTOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCOSTO_FLETE_POR_UNIDADNull() As Boolean
            Return Me.IsNull(Me.tableINTERFASESCOSTOS.COSTO_FLETE_POR_UNIDADColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCOSTO_FLETE_POR_UNIDADNull()
            Me(Me.tableINTERFASESCOSTOS.COSTO_FLETE_POR_UNIDADColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCOSTO_ADUANAL_POR_UNIDADNull() As Boolean
            Return Me.IsNull(Me.tableINTERFASESCOSTOS.COSTO_ADUANAL_POR_UNIDADColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCOSTO_ADUANAL_POR_UNIDADNull()
            Me(Me.tableINTERFASESCOSTOS.COSTO_ADUANAL_POR_UNIDADColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsTOTAL_COSTO_PRODUCT0Null() As Boolean
            Return Me.IsNull(Me.tableINTERFASESCOSTOS.TOTAL_COSTO_PRODUCT0Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetTOTAL_COSTO_PRODUCT0Null()
            Me(Me.tableINTERFASESCOSTOS.TOTAL_COSTO_PRODUCT0Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class COSTOSANTERIORRow
        Inherits Global.System.Data.DataRow
        
        Private tableCOSTOSANTERIOR As COSTOSANTERIORDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCOSTOSANTERIOR = CType(Me.Table,COSTOSANTERIORDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SAP_ID_MATERIAL() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOSTOSANTERIOR.SAP_ID_MATERIALColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SAP_ID_MATERIAL' in table 'COSTOSANTERIOR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOSTOSANTERIOR.SAP_ID_MATERIALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SAP_NUM_MATERIAL_LEGADO() As String
            Get
                Return CType(Me(Me.tableCOSTOSANTERIOR.SAP_NUM_MATERIAL_LEGADOColumn),String)
            End Get
            Set
                Me(Me.tableCOSTOSANTERIOR.SAP_NUM_MATERIAL_LEGADOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SAP_ACTUAL_COST() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCOSTOSANTERIOR.SAP_ACTUAL_COSTColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SAP_ACTUAL_COST' in table 'COSTOSANTERIOR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOSTOSANTERIOR.SAP_ACTUAL_COSTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSAP_ID_MATERIALNull() As Boolean
            Return Me.IsNull(Me.tableCOSTOSANTERIOR.SAP_ID_MATERIALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSAP_ID_MATERIALNull()
            Me(Me.tableCOSTOSANTERIOR.SAP_ID_MATERIALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSAP_ACTUAL_COSTNull() As Boolean
            Return Me.IsNull(Me.tableCOSTOSANTERIOR.SAP_ACTUAL_COSTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSAP_ACTUAL_COSTNull()
            Me(Me.tableCOSTOSANTERIOR.SAP_ACTUAL_COSTColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class COSTOPROMEDIORow
        Inherits Global.System.Data.DataRow
        
        Private tableCOSTOPROMEDIO As COSTOPROMEDIODataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCOSTOPROMEDIO = CType(Me.Table,COSTOPROMEDIODataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PRO_CLAVE() As String
            Get
                Return CType(Me(Me.tableCOSTOPROMEDIO.PRO_CLAVEColumn),String)
            End Get
            Set
                Me(Me.tableCOSTOPROMEDIO.PRO_CLAVEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CANTIDAD() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCOSTOPROMEDIO.CANTIDADColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CANTIDAD' in table 'COSTOPROMEDIO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOSTOPROMEDIO.CANTIDADColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ML() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCOSTOPROMEDIO.MLColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ML' in table 'COSTOPROMEDIO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOSTOPROMEDIO.MLColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property _M_() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCOSTOPROMEDIO._M_Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'M$' in table 'COSTOPROMEDIO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOSTOPROMEDIO._M_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ARANCEL() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCOSTOPROMEDIO.ARANCELColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ARANCEL' in table 'COSTOPROMEDIO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOSTOPROMEDIO.ARANCELColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FLETE() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCOSTOPROMEDIO.FLETEColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FLETE' in table 'COSTOPROMEDIO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOSTOPROMEDIO.FLETEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCANTIDADNull() As Boolean
            Return Me.IsNull(Me.tableCOSTOPROMEDIO.CANTIDADColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCANTIDADNull()
            Me(Me.tableCOSTOPROMEDIO.CANTIDADColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMLNull() As Boolean
            Return Me.IsNull(Me.tableCOSTOPROMEDIO.MLColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMLNull()
            Me(Me.tableCOSTOPROMEDIO.MLColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Is_M_Null() As Boolean
            Return Me.IsNull(Me.tableCOSTOPROMEDIO._M_Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Set_M_Null()
            Me(Me.tableCOSTOPROMEDIO._M_Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsARANCELNull() As Boolean
            Return Me.IsNull(Me.tableCOSTOPROMEDIO.ARANCELColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetARANCELNull()
            Me(Me.tableCOSTOPROMEDIO.ARANCELColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsFLETENull() As Boolean
            Return Me.IsNull(Me.tableCOSTOPROMEDIO.FLETEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetFLETENull()
            Me(Me.tableCOSTOPROMEDIO.FLETEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class INTERFASESCOSTOSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As INTERFASESCOSTOSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As INTERFASESCOSTOSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As INTERFASESCOSTOSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class COSTOSANTERIORRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As COSTOSANTERIORRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As COSTOSANTERIORRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As COSTOSANTERIORRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class COSTOPROMEDIORowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As COSTOPROMEDIORow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As COSTOPROMEDIORow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As COSTOPROMEDIORow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
